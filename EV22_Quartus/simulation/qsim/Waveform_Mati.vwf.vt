// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2022 15:09:58"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uc1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uc1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg de0_clk;
reg nRST;
reg [15:0] PI0;
reg [15:0] PI1;
// wires                                               
wire [15:0] B;
wire clk_k;
wire clk_pc;
wire clk_ram;
wire clk_reg;
wire clk_rom;
wire [15:0] OC_out;
wire [10:0] PC_out;
wire [14:0] vga_addr;
wire vga_e;
wire vga_hsync;
wire [2:0] vga_rgb;
wire vga_vsync;
wire [15:0] WR_out;
wire [15:0] z;

// assign statements (if any)                          
uc1 i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.clk_k(clk_k),
	.clk_pc(clk_pc),
	.clk_ram(clk_ram),
	.clk_reg(clk_reg),
	.clk_rom(clk_rom),
	.de0_clk(de0_clk),
	.nRST(nRST),
	.OC_out(OC_out),
	.PC_out(PC_out),
	.PI0(PI0),
	.PI1(PI1),
	.vga_addr(vga_addr),
	.vga_e(vga_e),
	.vga_hsync(vga_hsync),
	.vga_rgb(vga_rgb),
	.vga_vsync(vga_vsync),
	.WR_out(WR_out),
	.z(z)
);
initial 
begin 
#1000000 $finish;
end 

// de0_clk
always
begin
	de0_clk = 1'b0;
	de0_clk = #10000 1'b1;
	#10000;
end 

// nRST
initial
begin
	nRST = 1'b1;
	nRST = #10000 1'b0;
	nRST = #30000 1'b1;
end 
// PI0[ 15 ]
initial
begin
	PI0[15] = 1'bX;
	PI0[15] = #999000 1'b0;
end 
// PI0[ 14 ]
initial
begin
	PI0[14] = 1'bX;
	PI0[14] = #999000 1'b0;
end 
// PI0[ 13 ]
initial
begin
	PI0[13] = 1'bX;
	PI0[13] = #999000 1'b0;
end 
// PI0[ 12 ]
initial
begin
	PI0[12] = 1'bX;
	PI0[12] = #999000 1'b0;
end 
// PI0[ 11 ]
initial
begin
	PI0[11] = 1'bX;
	PI0[11] = #999000 1'b0;
end 
// PI0[ 10 ]
initial
begin
	PI0[10] = 1'bX;
	PI0[10] = #999000 1'b0;
end 
// PI0[ 9 ]
initial
begin
	PI0[9] = 1'bX;
	PI0[9] = #999000 1'b0;
end 
// PI0[ 8 ]
initial
begin
	PI0[8] = 1'bX;
	PI0[8] = #999000 1'b0;
end 
// PI0[ 7 ]
initial
begin
	PI0[7] = 1'bX;
	PI0[7] = #999000 1'b0;
end 
// PI0[ 6 ]
initial
begin
	PI0[6] = 1'bX;
	PI0[6] = #999000 1'b0;
end 
// PI0[ 5 ]
initial
begin
	PI0[5] = 1'bX;
	PI0[5] = #999000 1'b0;
end 
// PI0[ 4 ]
initial
begin
	PI0[4] = 1'bX;
	PI0[4] = #999000 1'b0;
end 
// PI0[ 3 ]
initial
begin
	PI0[3] = 1'bX;
	PI0[3] = #999000 1'b0;
end 
// PI0[ 2 ]
initial
begin
	PI0[2] = 1'bX;
	PI0[2] = #999000 1'b0;
end 
// PI0[ 1 ]
initial
begin
	PI0[1] = 1'bX;
	PI0[1] = #999000 1'b0;
end 
// PI0[ 0 ]
initial
begin
	PI0[0] = 1'bX;
	PI0[0] = #999000 1'b0;
end 
// PI1[ 15 ]
initial
begin
	PI1[15] = 1'bX;
	PI1[15] = #999000 1'b0;
end 
// PI1[ 14 ]
initial
begin
	PI1[14] = 1'bX;
	PI1[14] = #999000 1'b0;
end 
// PI1[ 13 ]
initial
begin
	PI1[13] = 1'bX;
	PI1[13] = #999000 1'b0;
end 
// PI1[ 12 ]
initial
begin
	PI1[12] = 1'bX;
	PI1[12] = #999000 1'b0;
end 
// PI1[ 11 ]
initial
begin
	PI1[11] = 1'bX;
	PI1[11] = #999000 1'b0;
end 
// PI1[ 10 ]
initial
begin
	PI1[10] = 1'bX;
	PI1[10] = #999000 1'b0;
end 
// PI1[ 9 ]
initial
begin
	PI1[9] = 1'bX;
	PI1[9] = #999000 1'b0;
end 
// PI1[ 8 ]
initial
begin
	PI1[8] = 1'bX;
	PI1[8] = #999000 1'b0;
end 
// PI1[ 7 ]
initial
begin
	PI1[7] = 1'bX;
	PI1[7] = #999000 1'b0;
end 
// PI1[ 6 ]
initial
begin
	PI1[6] = 1'bX;
	PI1[6] = #999000 1'b0;
end 
// PI1[ 5 ]
initial
begin
	PI1[5] = 1'bX;
	PI1[5] = #999000 1'b0;
end 
// PI1[ 4 ]
initial
begin
	PI1[4] = 1'bX;
	PI1[4] = #999000 1'b0;
end 
// PI1[ 3 ]
initial
begin
	PI1[3] = 1'bX;
	PI1[3] = #999000 1'b0;
end 
// PI1[ 2 ]
initial
begin
	PI1[2] = 1'bX;
	PI1[2] = #999000 1'b0;
end 
// PI1[ 1 ]
initial
begin
	PI1[1] = 1'bX;
	PI1[1] = #999000 1'b0;
end 
// PI1[ 0 ]
initial
begin
	PI1[0] = 1'bX;
	PI1[0] = #999000 1'b0;
end 
endmodule

