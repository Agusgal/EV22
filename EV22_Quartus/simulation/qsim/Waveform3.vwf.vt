// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/03/2022 16:04:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uc1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uc1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] A_test;
reg [3:0] ALUC_test;
reg [15:0] B_test;
reg clk_pc;
reg clk_reg;
reg cyin_test;
reg nRST;
// wires                                               
wire [15:0] A_posmux;
wire [15:0] A_premux;
wire [3:0] aluc;
wire [15:0] B;
wire [15:0] C;
wire cyout_test;
wire [15:0] k_out;
wire [15:0] OPCODE;
wire [7:0] PC;
wire [4:0] Sel_A;
wire [5:0] Sel_B;
wire [5:0] Sel_C;
wire [15:0] z_test;

// assign statements (if any)                          
uc1 i1 (
// port map - connection between master ports and signals/registers   
	.A_posmux(A_posmux),
	.A_premux(A_premux),
	.A_test(A_test),
	.aluc(aluc),
	.ALUC_test(ALUC_test),
	.B(B),
	.B_test(B_test),
	.C(C),
	.clk_pc(clk_pc),
	.clk_reg(clk_reg),
	.cyin_test(cyin_test),
	.cyout_test(cyout_test),
	.k_out(k_out),
	.nRST(nRST),
	.OPCODE(OPCODE),
	.PC(PC),
	.Sel_A(Sel_A),
	.Sel_B(Sel_B),
	.Sel_C(Sel_C),
	.z_test(z_test)
);
initial 
begin 
#1000000 $finish;
end 
// A_test[ 15 ]
initial
begin
	A_test[15] = 1'b0;
end 
// A_test[ 14 ]
initial
begin
	A_test[14] = 1'b0;
end 
// A_test[ 13 ]
initial
begin
	A_test[13] = 1'b0;
end 
// A_test[ 12 ]
initial
begin
	A_test[12] = 1'b0;
end 
// A_test[ 11 ]
initial
begin
	A_test[11] = 1'b0;
end 
// A_test[ 10 ]
initial
begin
	A_test[10] = 1'b0;
end 
// A_test[ 9 ]
initial
begin
	A_test[9] = 1'b0;
end 
// A_test[ 8 ]
initial
begin
	A_test[8] = 1'b0;
end 
// A_test[ 7 ]
initial
begin
	A_test[7] = 1'b0;
end 
// A_test[ 6 ]
initial
begin
	A_test[6] = 1'b0;
end 
// A_test[ 5 ]
initial
begin
	A_test[5] = 1'b0;
end 
// A_test[ 4 ]
initial
begin
	A_test[4] = 1'b0;
end 
// A_test[ 3 ]
initial
begin
	A_test[3] = 1'b0;
end 
// A_test[ 2 ]
initial
begin
	A_test[2] = 1'b0;
end 
// A_test[ 1 ]
initial
begin
	A_test[1] = 1'b0;
	A_test[1] = #260000 1'b1;
	A_test[1] = #90000 1'b0;
end 
// A_test[ 0 ]
initial
begin
	A_test[0] = 1'b0;
	A_test[0] = #30000 1'b1;
	A_test[0] = #320000 1'b0;
end 
// B_test[ 15 ]
initial
begin
	B_test[15] = 1'b0;
end 
// B_test[ 14 ]
initial
begin
	B_test[14] = 1'b0;
end 
// B_test[ 13 ]
initial
begin
	B_test[13] = 1'b0;
end 
// B_test[ 12 ]
initial
begin
	B_test[12] = 1'b0;
end 
// B_test[ 11 ]
initial
begin
	B_test[11] = 1'b0;
end 
// B_test[ 10 ]
initial
begin
	B_test[10] = 1'b0;
end 
// B_test[ 9 ]
initial
begin
	B_test[9] = 1'b0;
end 
// B_test[ 8 ]
initial
begin
	B_test[8] = 1'b0;
end 
// B_test[ 7 ]
initial
begin
	B_test[7] = 1'b0;
end 
// B_test[ 6 ]
initial
begin
	B_test[6] = 1'b0;
end 
// B_test[ 5 ]
initial
begin
	B_test[5] = 1'b0;
end 
// B_test[ 4 ]
initial
begin
	B_test[4] = 1'b0;
end 
// B_test[ 3 ]
initial
begin
	B_test[3] = 1'b0;
end 
// B_test[ 2 ]
initial
begin
	B_test[2] = 1'b0;
end 
// B_test[ 1 ]
initial
begin
	B_test[1] = 1'b0;
	B_test[1] = #40000 1'b1;
	B_test[1] = #320000 1'b0;
end 
// B_test[ 0 ]
initial
begin
	B_test[0] = 1'b0;
end 
// ALUC_test[ 3 ]
initial
begin
	ALUC_test[3] = 1'b0;
end 
// ALUC_test[ 2 ]
initial
begin
	ALUC_test[2] = 1'b0;
	ALUC_test[2] = #30000 1'b1;
	ALUC_test[2] = #340000 1'b0;
end 
// ALUC_test[ 1 ]
initial
begin
	ALUC_test[1] = 1'b0;
end 
// ALUC_test[ 0 ]
initial
begin
	ALUC_test[0] = 1'b0;
end 
endmodule

