// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/08/2022 01:59:57"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uc1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uc1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_k;
reg clk_pc;
reg clk_reg;
reg nRST;
reg [15:0] PI0;
reg [15:0] PI1;
// wires                                               
wire [15:0] Aposmux;
wire [15:0] Boutput;
wire kmuxk;
wire [15:0] Koutput;
wire [15:0] OPCODE_out;
wire opcodek;
wire [10:0] ProgramOut;
wire [4:0] Sel_A;
wire [5:0] Sel_B;
wire [5:0] Sel_C;
wire [15:0] WR;

// assign statements (if any)                          
uc1 i1 (
// port map - connection between master ports and signals/registers   
	.Aposmux(Aposmux),
	.Boutput(Boutput),
	.clk_k(clk_k),
	.clk_pc(clk_pc),
	.clk_reg(clk_reg),
	.kmuxk(kmuxk),
	.Koutput(Koutput),
	.nRST(nRST),
	.OPCODE_out(OPCODE_out),
	.opcodek(opcodek),
	.PI0(PI0),
	.PI1(PI1),
	.ProgramOut(ProgramOut),
	.Sel_A(Sel_A),
	.Sel_B(Sel_B),
	.Sel_C(Sel_C),
	.WR(WR)
);
initial 
begin 
#1000000 $finish;
end 

// nRST
initial
begin
	nRST = 1'b1;
	nRST = #20000 1'b0;
	nRST = #60000 1'b1;
end 

// clk_pc
initial
begin
	clk_pc = 1'b1;
	clk_pc = #50000 1'b0;
	# 50000;
	repeat(8)
	begin
		clk_pc = 1'b1;
		clk_pc = #50000 1'b0;
		# 50000;
	end
	clk_pc = 1'b1;
	clk_pc = #50000 1'b0;
end 

// clk_reg
always
begin
	clk_reg = 1'b0;
	clk_reg = #12500 1'b1;
	#12500;
end 
endmodule

