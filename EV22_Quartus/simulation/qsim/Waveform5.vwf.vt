// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2022 00:19:26"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uc1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uc1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg de0_clk;
reg HOLD;
reg nRST;
// wires                                               
wire [3:0] ALUC;
wire [15:0] Bout;
wire clk_k;
wire clk_pc;
wire clk_ram;
wire clk_reg;
wire clk_rom;
wire KMux_MIR1;
wire [15:0] KOUT;
wire [15:0] OPCODE_out;
wire [10:0] PC_out;
wire [4:0] SelA_MIR1;
wire [5:0] SelC_MIR1;
wire [5:0] SelC_MIR2;
wire [5:0] SelC_MIR3;
wire [5:0] SelC_outUC1;
wire [15:0] WR_out;
wire [15:0] z;

// assign statements (if any)                          
uc1 i1 (
// port map - connection between master ports and signals/registers   
	.ALUC(ALUC),
	.Bout(Bout),
	.clk_k(clk_k),
	.clk_pc(clk_pc),
	.clk_ram(clk_ram),
	.clk_reg(clk_reg),
	.clk_rom(clk_rom),
	.de0_clk(de0_clk),
	.HOLD(HOLD),
	.KMux_MIR1(KMux_MIR1),
	.KOUT(KOUT),
	.nRST(nRST),
	.OPCODE_out(OPCODE_out),
	.PC_out(PC_out),
	.SelA_MIR1(SelA_MIR1),
	.SelC_MIR1(SelC_MIR1),
	.SelC_MIR2(SelC_MIR2),
	.SelC_MIR3(SelC_MIR3),
	.SelC_outUC1(SelC_outUC1),
	.WR_out(WR_out),
	.z(z)
);
initial 
begin 
#1000000 $finish;
end 

// de0_clk
always
begin
	de0_clk = 1'b0;
	de0_clk = #10000 1'b1;
	#10000;
end 

// HOLD
initial
begin
	HOLD = 1'b0;
	HOLD = #200000 1'b1;
	HOLD = #280000 1'b0;
end 

// nRST
initial
begin
	nRST = 1'b1;
	nRST = #160000 1'b0;
	nRST = #20000 1'b1;
end 
endmodule

