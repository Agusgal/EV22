--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1625w[1..0]	: WIRE;
	w_anode1634w[3..0]	: WIRE;
	w_anode1651w[3..0]	: WIRE;
	w_anode1661w[3..0]	: WIRE;
	w_anode1671w[3..0]	: WIRE;
	w_anode1681w[3..0]	: WIRE;
	w_anode1691w[3..0]	: WIRE;
	w_anode1701w[3..0]	: WIRE;
	w_anode1711w[3..0]	: WIRE;
	w_anode1723w[1..0]	: WIRE;
	w_anode1730w[3..0]	: WIRE;
	w_anode1741w[3..0]	: WIRE;
	w_anode1751w[3..0]	: WIRE;
	w_anode1761w[3..0]	: WIRE;
	w_anode1771w[3..0]	: WIRE;
	w_anode1781w[3..0]	: WIRE;
	w_anode1791w[3..0]	: WIRE;
	w_anode1801w[3..0]	: WIRE;
	w_data1623w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode1801w[3..3], w_anode1791w[3..3], w_anode1781w[3..3], w_anode1771w[3..3], w_anode1761w[3..3], w_anode1751w[3..3], w_anode1741w[3..3], w_anode1730w[3..3]), ( w_anode1711w[3..3], w_anode1701w[3..3], w_anode1691w[3..3], w_anode1681w[3..3], w_anode1671w[3..3], w_anode1661w[3..3], w_anode1651w[3..3], w_anode1634w[3..3]));
	w_anode1625w[] = ( (w_anode1625w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1634w[] = ( (w_anode1634w[2..2] & (! w_data1623w[2..2])), (w_anode1634w[1..1] & (! w_data1623w[1..1])), (w_anode1634w[0..0] & (! w_data1623w[0..0])), w_anode1625w[1..1]);
	w_anode1651w[] = ( (w_anode1651w[2..2] & (! w_data1623w[2..2])), (w_anode1651w[1..1] & (! w_data1623w[1..1])), (w_anode1651w[0..0] & w_data1623w[0..0]), w_anode1625w[1..1]);
	w_anode1661w[] = ( (w_anode1661w[2..2] & (! w_data1623w[2..2])), (w_anode1661w[1..1] & w_data1623w[1..1]), (w_anode1661w[0..0] & (! w_data1623w[0..0])), w_anode1625w[1..1]);
	w_anode1671w[] = ( (w_anode1671w[2..2] & (! w_data1623w[2..2])), (w_anode1671w[1..1] & w_data1623w[1..1]), (w_anode1671w[0..0] & w_data1623w[0..0]), w_anode1625w[1..1]);
	w_anode1681w[] = ( (w_anode1681w[2..2] & w_data1623w[2..2]), (w_anode1681w[1..1] & (! w_data1623w[1..1])), (w_anode1681w[0..0] & (! w_data1623w[0..0])), w_anode1625w[1..1]);
	w_anode1691w[] = ( (w_anode1691w[2..2] & w_data1623w[2..2]), (w_anode1691w[1..1] & (! w_data1623w[1..1])), (w_anode1691w[0..0] & w_data1623w[0..0]), w_anode1625w[1..1]);
	w_anode1701w[] = ( (w_anode1701w[2..2] & w_data1623w[2..2]), (w_anode1701w[1..1] & w_data1623w[1..1]), (w_anode1701w[0..0] & (! w_data1623w[0..0])), w_anode1625w[1..1]);
	w_anode1711w[] = ( (w_anode1711w[2..2] & w_data1623w[2..2]), (w_anode1711w[1..1] & w_data1623w[1..1]), (w_anode1711w[0..0] & w_data1623w[0..0]), w_anode1625w[1..1]);
	w_anode1723w[] = ( (w_anode1723w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1730w[] = ( (w_anode1730w[2..2] & (! w_data1623w[2..2])), (w_anode1730w[1..1] & (! w_data1623w[1..1])), (w_anode1730w[0..0] & (! w_data1623w[0..0])), w_anode1723w[1..1]);
	w_anode1741w[] = ( (w_anode1741w[2..2] & (! w_data1623w[2..2])), (w_anode1741w[1..1] & (! w_data1623w[1..1])), (w_anode1741w[0..0] & w_data1623w[0..0]), w_anode1723w[1..1]);
	w_anode1751w[] = ( (w_anode1751w[2..2] & (! w_data1623w[2..2])), (w_anode1751w[1..1] & w_data1623w[1..1]), (w_anode1751w[0..0] & (! w_data1623w[0..0])), w_anode1723w[1..1]);
	w_anode1761w[] = ( (w_anode1761w[2..2] & (! w_data1623w[2..2])), (w_anode1761w[1..1] & w_data1623w[1..1]), (w_anode1761w[0..0] & w_data1623w[0..0]), w_anode1723w[1..1]);
	w_anode1771w[] = ( (w_anode1771w[2..2] & w_data1623w[2..2]), (w_anode1771w[1..1] & (! w_data1623w[1..1])), (w_anode1771w[0..0] & (! w_data1623w[0..0])), w_anode1723w[1..1]);
	w_anode1781w[] = ( (w_anode1781w[2..2] & w_data1623w[2..2]), (w_anode1781w[1..1] & (! w_data1623w[1..1])), (w_anode1781w[0..0] & w_data1623w[0..0]), w_anode1723w[1..1]);
	w_anode1791w[] = ( (w_anode1791w[2..2] & w_data1623w[2..2]), (w_anode1791w[1..1] & w_data1623w[1..1]), (w_anode1791w[0..0] & (! w_data1623w[0..0])), w_anode1723w[1..1]);
	w_anode1801w[] = ( (w_anode1801w[2..2] & w_data1623w[2..2]), (w_anode1801w[1..1] & w_data1623w[1..1]), (w_anode1801w[0..0] & w_data1623w[0..0]), w_anode1723w[1..1]);
	w_data1623w[2..0] = data_wire[2..0];
END;
--VALID FILE
